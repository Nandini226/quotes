{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Apps","useState","currentQuote","setCurrentQuote","input","setInput","firebase","ref","on","data","console","log","newQuoteList","useEffect","collection","get","then","snapshot","docs","forEach","doc","push","arr","map","quote","className","id","Math","floor","length","random","value","onChange","event","target","onClick","e","preventDefault","db","settings","timestampsInSnapshots","add","Boolean","window","location","hostname","match","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+PAgFeA,MA3Ef,WAAiB,IAAD,EAC0BC,mBAAS,IADnC,mBACPC,EADO,KACOC,EADP,OAEYF,qBAFZ,mBAEPG,EAFO,KAEAC,EAFA,OAGYJ,qBAHZ,6BAaCK,aACIC,IAAI,QACnBC,GAAG,SACP,SAAiBC,GACfC,QAAQC,IAAIF,MAEd,SAAgBA,GACdC,QAAQC,IAAI,QAASF,MAEvB,IAYIG,EAAe,GACnBC,qBAAU,WACGP,cACRQ,WAAW,QAAQC,MAAMC,MAAK,SAACC,GAEhCA,EAASC,KAAKC,SAAQ,SAAAC,GACpBR,EAAaS,KAAKD,EAAIX,WAExBN,EAAgBS,QAEjB,IACH,IAAIU,EAAM,GAOV,OALEpB,EAAaqB,KAAI,SAAAC,GAAK,OACpBF,EAAID,KAAKG,EAAMA,UAKjB,yBAAKC,UAAU,OACb,wBAAIA,UAAU,qBAAd,mBACA,yBAAKA,UAAU,mBACZvB,GACC,yBAAKuB,UAAU,QAAQC,GAAG,QAAQJ,EAAIK,KAAKC,MAAMN,EAAIO,OAASF,KAAKG,aAKvE,yBAAKL,UAAU,qBACb,yEAEF,2BAAOA,UAAU,QAAQM,MAAO3B,EAAO4B,SA1D5B,SAAAC,GACb5B,EAAS4B,EAAMC,OAAOH,UA0DpB,4BAAQN,UAAU,sBAAsBU,QA5CzB,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAKhC,cACXgC,EAAGC,SAAS,CACVC,uBAAuB,IAETF,EAAGxB,WAAW,QAAQ2B,IAAI,CACxCjB,MAAOpB,IAETM,QAAQC,IAAI,QAASP,GACrBC,EAAS,MAkCP,kBC3DcqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCANxC,gBAVwB,CACtByC,OAAQ,0CACRC,WAAY,+BACZC,YAAa,sCACbC,UAAW,eACXC,cAAe,2BACfC,kBAAmB,eACnBC,MAAO,8CAMTC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAIFC,SAASC,eAAe,SDwGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.334660b9.chunk.js","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as firebase from 'firebase';\nfunction Apps() {\n  const [currentQuote, setCurrentQuote] = useState([]);\n  const [input, setInput] = useState();\n  const [value, setValue] = useState();\n\n\n\n  const handle = event => {\n    setInput(event.target.value);\n  }\n\n\n\n  let database = firebase.database();\n  let ref = database.ref(\"user\");\n  ref.on(\"value\", gotData, gotErr)\n  function gotData(data) {\n    console.log(data);\n  }\n  function gotErr(data) {\n    console.log(\"ERRO!\", data);\n  }\n  const addToArray = e => {\n    e.preventDefault();\n    const db = firebase.firestore();\n    db.settings({\n      timestampsInSnapshots: true\n    });\n    const userRef = db.collection('user').add({\n      quote: input\n    });\n    console.log(\"added\", input)\n    setInput(\"\");\n  }\n  let newQuoteList = [];\n  useEffect(() => {\n    const db = firebase.firestore();\n    db.collection('user').get().then((snapshot) => {\n      //let newQuoteList = [];\n      snapshot.docs.forEach(doc => {\n        newQuoteList.push(doc.data());\n      })\n      setCurrentQuote(newQuoteList);\n    })\n  }, [])\n  let arr = [];\n  const print =\n    currentQuote.map(quote => (\n      arr.push(quote.quote)\n\n    ))\n\n  return (\n    <div className=\"App\" >\n      <h1 className=\" book text-center\">Quote Generator</h1>\n      <div className=\"box text-center\">\n        {currentQuote && (\n          <div className=\"box1 \" id=\"box1\">{arr[Math.floor(arr.length * Math.random())]}\n          </div>\n        )}\n      </div>\n\n      <div className=\"text-center class\">\n        <h5>Type your Quote in the below input field</h5>\n      </div>\n      <input className=\"input\" value={input} onChange={handle} />\n      <button className=\" yo btn btn-primary\" onClick={addToArray}>Add my quote</button>\n      \n\n\n    </div>\n  );\n}\n\n\nexport default Apps;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as firebase from 'firebase';\n\nconst  firebaseConfig = {\n  apiKey: \"AIzaSyCZGmwVWWzgH-ST9bzQQC1sWaMqOzZOZbc\",\n  authDomain: \"quotes-80daa.firebaseapp.com\",\n  databaseURL: \"https://quotes-80daa.firebaseio.com\",\n  projectId: \"quotes-80daa\",\n  storageBucket: \"quotes-80daa.appspot.com\",\n  messagingSenderId: \"580506222775\",\n  appId: \"1:580506222775:web:0d79312a957585d4c8cd32\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}